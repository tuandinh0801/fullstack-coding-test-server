{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "MainLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/fullstack-coding-test-server-production-main"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "fullstack-coding-test-server",
                  "production",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/fullstack-coding-test-server-production*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/fullstack-coding-test-server-production*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "fullstack-coding-test-server",
              "production",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "MainLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/fullstack-coding-test-server/production/1616398697988-2021-03-22T07:38:17.988Z/fullstack-coding-test-server.zip"
        },
        "Handler": "_optimize/fullstack-coding-test-server-production-main/src/lambda.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "fullstack-coding-test-server-production-main",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "DATABASE_HOST": "john.db.elephantsql.com",
            "DATABASE_POST": "5432",
            "DATABASE_USERNAME": "iemouhkh",
            "DATABASE_PASSWORD": "6JxcSGY1xO1ubuZqBSbtsM71GlyuHA8x",
            "DATABASE_ROOT_DB": "iemouhkh",
            "FIREBASE_PROJECT_ID": "fullstack-coding-test",
            "FIREBASE_PRIVATE_KEY": "-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDHb82/OF2v5B3s\\n1JkG+LRJbWoAbKLBmDOLUanq8S252tx7GngIhcEdWasii5RVcac+S6eFk+MBRT+Q\\ndcRoB3+1etQ54tytcSj+El2GXj3dNSl9u68W83P5SyKQQTF8cIQHfAHi+N3xNqrr\\nuIvyYOtCOdB7t3zArMHytJeCUmOANygcgyOPV1shgM0MqDt3masgfr5pUbgQZgt1\\nEOW3UzEuOZOxlt+f8aEabaco/fKzDhpJDi5sflMOfAzyjzXeOby5hQII23Gct9D4\\nvrQsbuB45Eqg+EYR80VoaYUbGDKC2DyzKqrYWGxaw1pNfpN94GkmYFb2ck8TGWJv\\nl1h4zn4xAgMBAAECggEAEZKN1+fxBVL9ugTfeOhIBmJAIUpxKsqs2/01khBvHX2l\\nyKkD44hZhCsG87PFvaOWf1wuJgxqR43g9GsUA7CJdaWddn5BQH0EhiJ7ICBEpi2N\\netkjK8wGr3QJ1xkPca3+TCSGjAeukpblB4EKv6//eqXac1QvB1ERg7+ay+5TexP5\\nEQ3komsyjnZJuSmL2EvHsWaLrPQW1IrR/jPgfK/ngB4o6K2Quru6ZobgTatkKryh\\nn2OUVRwzHAPnNUGqdAqMhLR/oQgXvFKYZgr6Jr1E+EJeYT8ZdEN42z9kALrhXr5f\\nSOYsbiAmNkWnqybweBZT+RQm1bX6xPpXRrzTZvghIQKBgQD443iPu9p8NkreSV8y\\nMr2nL0eqW8+TeFMjJFcxAGbG1pOeBr6GOx16xXX11hT1k4GNx3u4uOzbk+XkEGzj\\nIU20A8MwTbhTGErDejt5S6iRYV3V8NpVLm9tgbOsCVfPT15VSQxQlqFToO1vD6IP\\nMS5VKKlQqKvafjRUauBt0Msc6QKBgQDNIpxV4Rr8JjPRkmV5tD17TOg08qGEnPdJ\\nW+GCJmzn5FqGr/HM48zDK5IRMQ2oxjovRfUoMwBmYQcy1DgafhoujxkeNC2dPxjP\\nfRPKcLoWAxhOAKBWTmHyEeyFeXOCifV1VYceXzcXu175/amjtU7WG0eIBx3sysEW\\n7QObMuJqCQKBgBd9GD6wYuFAGna6A/Lv2PgzPRc1zPRE8cuqPVRRjmGLlKjgSBDQ\\n+WpBwm0uBBJdFmf0AJghU7ExVwvcBPq2hOfNRxmC7DdjXoLuQTikTEdUIg/zyBcr\\n57Y0/GjrBM961RNFbpUYcic7U80cc5XtdUryKHCFSpq3OGcTIxUaFGEpAoGBAIGg\\n63YBiBHq+jfm8SUVVvzBvsMmyBaLMmEzJLAgJBXt4Z7XNE+rbEuxDt66Rs1uZnpV\\nFPTQNeJ8UhY2sTVclqLxXogNpP2HT+BeQ9FbptweHI++KZQgeBiGZxZ5hxronyoE\\nYBw7Qw9GImCLgVWoTydRmcRF6w0lmxsnr221nAoxAoGASPKZXvUnBrCJ9sUYY0qx\\nc99/5amlNecTmSaJrqB/WZiomT+ylDW8HIpS2+C3YwLEZQCsqMwsTjxAAmOoRMB3\\nHQNT5jFofHMHN9jehwqKWiq2S7/UTAJLFN+eZhOtkodH9woFp/zvEfXZ6xev5Z70\\nniUqBCy9VzZcfR9TJ9Xy5gU=\\n-----END PRIVATE KEY-----\\n",
            "FIREBASE_CLIENT_EMAIL": "firebase-adminsdk-8v7kn@fullstack-coding-test.iam.gserviceaccount.com"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MainLogGroup"
      ]
    },
    "MainLambdaVersion4aq9acMuA7zTqqooyDtAmQhj4g5O19YAu9LHrik": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MainLambdaFunction"
        },
        "CodeSha256": "VQy4HxzkNj1lMcYbdN06mA85E4ccvLGNRJIg9nJc3eM="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "production-fullstack-coding-test-server",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceAnyVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "{any+}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAnyVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
              },
              "ResponseTemplates": {
                "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAnyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAnyVarAny": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "ANY",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAnyVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MainLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1616398676111": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "production"
      },
      "DependsOn": [
        "ApiGatewayMethodAnyVarOptions",
        "ApiGatewayMethodAnyVarAny"
      ]
    },
    "MainLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MainLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "MainLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MainLambdaVersion4aq9acMuA7zTqqooyDtAmQhj4g5O19YAu9LHrik"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/production"
          ]
        ]
      }
    }
  }
}